clc
clear
cost=[2 1 0 0 0 0];
A=[1 2 1 0 0; 1 1 0 1 0; 1 -1 0 0 1];
b=[10; 6; 2];
A=[A b];
bv=[3 4 5];
var={'x1','x2','s1','s2','s3','b'};
ZjCj=cost(bv)*A-cost;
simplex_table=[A;ZjCj];
array2table(simplex_table,'VariableNames',var)
RUN=true;
while RUN
    ZC=ZjCj(1:end-1);
    if any(ZC<0)
        fprintf('Solution is not optimal \n');
        [Enter_var,Pivot_col]=min(ZC);
        if all(A(:,Pivot_col)<=0)
            fprintf('LPP is unbounded');
        else
            sol=A(:,end);
            column=A(:,Pivot_col);
            for i=1:size(A,1)
                if column(i)>0
                    ratio(i)=sol(i)./column(i);
                else
                    ratio(i)=inf;
                end
            end
        end
        [Leaving_value Pivot_row]=min(ratio);
        Pivot_key=A(Pivot_row,Pivot_col);
        bv(Pivot_row)=Pivot_col;
        A(Pivot_row,:)=A(Pivot_row,:)/Pivot_key;
        for i=1:size(A,1)
            if i~=Pivot_row
                A(i,:)=A(i,:)-A(i,Pivot_col)*A(Pivot_row,:);
            end
        end
        ZjCj=cost(bv)*A-cost;
        new_table=[A;ZjCj];
        array2table(new_table,'VariableNames',var)
    else
        RUN=false;
    end
end
fprintf('The optimal solution is %f \n',ZjCj(end));


format short
clc
clear all
M=1000;
var={'x1','x2','s2','s3','A1','A2','sol'};
cost=[-2 -1 0 0 -M -M 0]; %always include sol
A=[3 1 0 0 1 0; 4 3 -1 0 0 1; 1 2 0 1 0 0];
b=[3;6;3];
A=[A b];
art_v=[5,6];
bv=[];  % are those who form identity matrix in order
s=eye(size(A,1)); % no. of Rows in A
for i=1:size(s,2)
    for j=1:size(A,2)
        if s(:,i)==A(:,j)
            bv = [bv j];
        end
    end
end
RUN = true;
while RUN 
    ZjCj = cost(bv)*A-cost;
    ZC = ZjCj(1,1:end-1); %remove sol to find pvt_col
    ST = [A;ZjCj];
    ST = array2table(ST,'VariableNames',var)
    if any(ZC<0)
        [val,pvt_col]=min(ZC);
        if all(A(:,pvt_col)<=0)
            fprintf('Unbounded LPP');
            return;
        end
        sol=A(:,end);
        PC=A(:,pvt_col);
        for i=1:size(A,1)
            if PC(i)>0
                ratio(i)=sol(i)/PC(i);
            else
                ratio(i)=inf;
            end
        end
        [val,pvt_row]=min(ratio);
        PK = A(pvt_row,pvt_col);
        %%% Row Transformation
        A(pvt_row,:)=A(pvt_row,:)/PK; %pvt_row/PK
        for i=1:size(A,1)
            if i~=pvt_row
                A(i,:)=A(i,:)-A(i,pvt_col)*A(pvt_row,:);
            end
        end
        bv(pvt_row) = pvt_col;
    else
        RUN=false;
    end
end
if find(art_v) == any(bv)
    fprintf('Infeasible Solution');
end    
fprintf('Optimal Table ->');
ST
fprintf('\nOpt Sol = %f', ZjCj(end));


clc;
clear all;
c = [ 0 0 0 0 -1 0]
A = [ 1 1 1 0 0; 1 3 0 1 0; 1 -1 0 0 1]
b = [2;3;1]
A = [A b]
bv = [3 4 5]
zjcj = c(bv)*A - c
simplex_table = [A; zjcj]
array2table(simplex_table , 'VariableNames', {'x1','x2','s1','s2','A1','sol'})
RUN = true
while RUN
    zc = zjcj(1:end-1);
    if any(zc<0)
        fprintf('sol is not optimal \n')
        [enter_val pvt_col] = min(zc);
        if all(A(:,pvt_col)<=0)
            fprintf('lpp is unbounded \n')
            RUN = false;
        else
            sol = A(:,end);
            col = A(:,pvt_col);
            for i = 1: size(A,1)
                if col(i) >0
                    ratio(i) = sol(i)/col(i);
                else
                    ratio(i) = inf;
                end
            end
            [leaving_value  pvt_row] = min(ratio);
            pvt_key = A( pvt_row, pvt_col);
            bv(pvt_row) = pvt_col;
            A(pvt_row, :)= A(pvt_row, :)/pvt_key;
            % row operations
            for i = 1:size(A,1)
                if i ~= pvt_row
                    A(i,:) = A(i,:)-A(i,pvt_col)*A(pvt_row,:);
                end
            end
            zjcj = c(bv)*A - c;
            new_table = [A; zjcj];
            array2table(new_table, 'Variablenames', {'x1','x2','s1','s2','R1','sol'})
            end 
        else
            RUN = false;
            fprintf('the optimal sol is %f \n',-zjcj(end))
        end
    end
    if A(end,5)>0 && zjcj(end) ~= 0
        fprintf('infeasible solution \n')
        return;
    else
    c = [3 2 0 0 0]
    b = A(:,6)
    A = A(:,1:4)
    A = [A b]
    zjcj = c(bv)*A - c
    simplex_table = [A; zjcj]
    array2table(simplex_table , 'VariableNames', {'x1','x2','s1','s2','sol'})
    RUN = true;
    while RUN
        zc = zjcj(1:end-1);
        if any(zc<0)
            fprintf('sol is not optimal \n')
            [enter_val pvt_col] = min(zc);
            if all(A(:,pvt_col)<=0)
                RUN = false;
                fprintf('lpp is unbounded \n')
            else
                sol = A(:,end);
                col = A(:,pvt_col);
                for i = 1: size(A,1)
                    if col(i) >0
                        ratio(i) = sol(i)/col(i);
                    else
                        ratio(i) = inf;
                    end
                end
                [leaving_value, pvt_row] = min(ratio);
                pvt_key = A(pvt_row, pvt_col);
            bv(pvt_row) = pvt_col;
            A(pvt_row, :)= A(pvt_row, :)/pvt_key;
            % row operations
            for i = 1:size(A,1)
                if i ~= pvt_row
                    A(i,:) = A(i,:)-A(i,pvt_col)*A(pvt_row,:);
                end
            end
            zjcj = c(bv)*A - c;
            new_table = [A; zjcj];
            array2table(new_table, 'Variablenames', {'x1','x2','s1','s2','sol'})
            end
         
        else
            RUN = false;
            fprintf('the optimal sol is %f \n',zjcj(end))
        end
    end
end


clc
clear
A=[-1 -1 1 0 0; -1 1 0 1 0; -2 -1 0 0 1];
b=[-2; -10; -6];
C=[-2 -1 0 0 0 0];
A=[A b];
BV=[3 4 5];
ZjCj=C(BV)*A-C;
S=[A;ZjCj];
Var={'x1','x2','s1','s2','s3','Sol'};
array2table(S,'VariableNames',Var)
RUN=true;
while RUN
    sol=A(:,end);
    if any(sol<0)
        [leaving_var,pvt_row]=min(sol);
        ZRow=A(pvt_row,1:end-1);
        ZC=ZjCj(1:end-1);
        for i=1:size(A,2)-1
            if ZRow(i)<0
                ratio(i)=abs(ZC(i)/ZRow(i));
            else
                ratio(i)=inf;
            end
        end
        [enter_var,pvt_col]=min(ratio);
        BV(pvt_row)=pvt_col;
        pvt_key=A(pvt_row, pvt_col);
        A(pvt_row,:)=A (pvt_row,:)./pvt_key; 
        for i=1:size(A,1)
            if i~=pvt_row
                A(i,:)=A(i,:)-A (i, pvt_col).*A(pvt_row,:);
            end
        end
        zjcj=C(BV)*A-C;
        next_table=[A; zjcj];
        array2table(next_table,'VariableNames',Var)
    else
        RUN=false;
        fprintf('The final optimal value is % f \n',zjcj(end));
    end
end


clc
clear all
format short
% Matlab Code of Least Cost Method (LCM)
% Input Information
%% Input Phase
Cost=[11 20 7 8; 21 16 10 12; 8 12 18 9];
A=[50 40 70];
B=[30 25 35 40];
%% To check unbalanced/balanced Problem
if sum(A)==sum(B)
    fprintf('Given Transportation Problem is Balanced \n')
else
   fprintf('Given Transportation Problem is Unbalanced \n') 
   if sum(A)<sum(B)
       Cost(end+1,:)=zeros(1,size(B,2))
       A(end+1)=sum(B)-sum(A)
   elseif sum(B)<sum(A)
   Cost(:,end+1)=zeros(1,size(A,2))
       B(end+1)=sum(A)-sum(B)  
   end
end
ICost=Cost
X=zeros(size(Cost))   % Initialize allocation
[m,n]=size(Cost)      % Finding No. of rows and columns
BFS=m+n-1             % Total No. of BFS
%% Finding the cell(with minimum cost) for the allocations
for i=1:size(Cost,1)
    for j=1:size(Cost,2)
        hh=min(Cost(:))   % Finding minimum cost value
        [Row_index, Col_index]=find(hh==Cost)  % Finding position of minimum cost cell
        x11=min(A(Row_index),B(Col_index))
        [Value,index]=max(x11)            % Find maximum allocation
        ii=Row_index(index)       % Identify Row Position
        jj=Col_index(index)        % Identify Column Position
        y11=min(A(ii),B(jj))        % Find the value
        X(ii,jj)=y11
        A(ii)=A(ii)-y11
        B(jj)=B(jj)-y11
        Cost(ii,jj)=Inf
    end
end
%% Print the initial BFS
fprintf('Initial BFS =\n')
IBFS=array2table(X)
disp(IBFS)
%% Check for Degenerate and Non Degenerate
TotalBFS=length(nonzeros(X))
if TotalBFS==BFS
    fprintf('Initial BFS is Non-Degenerate \n')
else
    fprintf('Initial BFS is Degenerate \n')
end
%% Compute the Initial Transportation cost
InitialCost=sum(sum(ICost.*X))
fprintf('Initial BFS Cost is = %d \n',InitialCost)